# MaasISO Debug Protocol

## ðŸš¨ FUNDAMENTAL PRINCIPLES ðŸš¨

1. **Debug Protocol Activation**
   - Protocol ONLY activates when encountering errors that exceed our defined thresholds:
     * Core Web Vitals violations (LCP > 2500ms, FID > 100ms, CLS > 0.1)
     * API errors (Error rate > 1%, Response time > 200ms)
     * Cache issues (Hit rate < 90%)
     * Resource failures (Image/Script loading > thresholds)
   - MUST request explicit permission before starting debug process
   - ALL debug sessions MUST be permanently logged
   - ZERO DELETION POLICY: Debug history is sacred

2. **Debug History Preservation**
   - Debug logs are permanent knowledge base entries
   - Each solution becomes a reference for future issues
   - Cross-referencing between similar issues is mandatory
   - Historical data helps prevent recurring problems

## DEBUG SESSION INITIATION

### 1. Error Detection & Classification
When error thresholds are exceeded, submit formal request:

```typescript
interface DebugRequest {
  // Basic Information
  sessionId: string;        // Format: DBG-YYYYMMDD-NNN
  timestamp: string;        // ISO 8601 format
  environment: 'development' | 'staging' | 'production';
  
  // Error Classification
  category: {
    primary: 'frontend' | 'api' | 'cache' | 'performance';
    subcategory: string;    // Specific component/feature
  };
  
  // Performance Metrics (if applicable)
  metrics?: {
    lcp?: number;          // Largest Contentful Paint
    fid?: number;          // First Input Delay
    cls?: number;          // Cumulative Layout Shift
    ttfb?: number;         // Time to First Byte
    apiResponse?: number;  // API Response Time
    cacheHitRate?: number; // Cache Performance
  };
  
  // Error Details
  error: {
    message: string;       // Error message
    stack?: string;        // Stack trace
    componentPath?: string;// Affected component
    route?: string;        // Affected route
  };
  
  // Impact Assessment
  impact: {
    severity: 'critical' | 'major' | 'minor';
    userExperience: string;
    businessFunction: string;
    affectedComponents: string[];
  };
}
```

Example Request:
```
[DEBUG PROTOCOL ACTIVATION REQUEST]
Session: DBG-20250127-001
Time: 2025-01-27 21:45:00 UTC+1
Environment: production

Category:
- Primary: frontend
- Subcategory: dynamic-routing

Performance Metrics:
- LCP: 3200ms (Threshold: 2500ms)
- TTFB: 950ms (Threshold: 800ms)

Error:
- Component: BlogPost Page
- Route: /blog/[slug]
- Message: "Cannot read properties of undefined (reading 'slug')"

Impact:
- Severity: Major
- User Experience: Content not displaying
- Business Function: Blog post accessibility
- Affected: BlogPost, RelatedPosts components

REQUEST: Permission to initiate debug protocol and create permanent log entry
```

### 2. Debug Log Structure

```typescript
interface DebugLog {
  // Session Metadata
  metadata: {
    id: string;
    startTime: string;
    environment: string;
    git: {
      commit: string;
      branch: string;
    };
    approval: {
      requestedBy: string;
      approvedBy: string;
      timestamp: string;
    };
  };

  // System State
  systemState: {
    nodeVersion: string;
    nextVersion: string;
    strapiVersion: string;
    dependencies: Record<string, string>;
    environmentVariables: string[];
  };

  // Performance Metrics
  metrics: {
    initial: {
      coreWebVitals: CoreWebVitals;
      apiMetrics: ApiMetrics;
      resourceMetrics: ResourceMetrics;
    };
    final: {
      coreWebVitals: CoreWebVitals;
      apiMetrics: ApiMetrics;
      resourceMetrics: ResourceMetrics;
    };
  };

  // Investigation Steps
  investigation: {
    steps: Array<{
      timestamp: string;
      action: string;
      result: string;
      metrics?: any;
      nextStep: string;
    }>;
  };

  // Resolution
  resolution: {
    rootCause: string;
    solution: string;
    codeChanges: Array<{
      file: string;
      change: string;
      reason: string;
    }>;
    verification: Array<{
      test: string;
      result: string;
      metrics?: any;
    }>;
  };

  // Prevention
  prevention: {
    monitoring: Array<{
      metric: string;
      threshold: number;
      alert: string;
    }>;
    tests: Array<{
      path: string;
      description: string;
    }>;
    documentation: Array<{
      path: string;
      updates: string[];
    }>;
  };
}
```

### 3. Directory Structure
```
cline_docs/
â””â”€â”€ debug_history/
    â”œâ”€â”€ _index.md                    // Master index (PERMANENT)
    â”œâ”€â”€ _metrics/                    // Performance baselines
    â”‚   â”œâ”€â”€ core_web_vitals.json
    â”‚   â”œâ”€â”€ api_metrics.json
    â”‚   â””â”€â”€ resource_metrics.json
    â”œâ”€â”€ _templates/                  // Debug templates
    â”‚   â”œâ”€â”€ frontend_error.md
    â”‚   â”œâ”€â”€ api_error.md
    â”‚   â”œâ”€â”€ cache_error.md
    â”‚   â””â”€â”€ performance_error.md
    â”œâ”€â”€ YYYY/                        // Year organization
    â”‚   â””â”€â”€ MM/                      // Month organization
    â”‚       â””â”€â”€ DBG-YYYYMMDD-NNN/    // Debug session
    â”‚           â”œâ”€â”€ debug_log.md     // Main log
    â”‚           â”œâ”€â”€ metrics/         // Performance data
    â”‚           â”‚   â”œâ”€â”€ before.json
    â”‚           â”‚   â””â”€â”€ after.json
    â”‚           â”œâ”€â”€ assets/          // Related files
    â”‚           â””â”€â”€ verification.md   // Solution verification
    â””â”€â”€ _archive/                    // Historical data (PERMANENT)
```

## DEBUG LOG REQUIREMENTS

### 1. Performance Context
MUST include before/after metrics:
```typescript
interface PerformanceContext {
  coreWebVitals: {
    lcp: number;    // Largest Contentful Paint
    fid: number;    // First Input Delay
    cls: number;    // Cumulative Layout Shift
    ttfb: number;   // Time to First Byte
    tti: number;    // Time to Interactive
  };
  
  apiMetrics: {
    responseTime: number;
    errorRate: number;
    cacheHitRate: number;
  };
  
  resourceMetrics: {
    imageLoading: number;
    scriptLoading: number;
    cssSize: number;
    totalBundleSize: number;
  };
}
```

### 2. Investigation Log
MUST document with metrics:
```markdown
## Investigation Steps

### [Timestamp] - Performance Analysis
- Core Web Vitals: [metrics]
- API Performance: [metrics]
- Resource Loading: [metrics]
- Cache Efficiency: [metrics]

### [Timestamp] - Component Analysis
- Render Times: [metrics]
- Memory Usage: [metrics]
- Error Boundaries: [status]
```

### 3. Solution Verification
MUST verify against thresholds:
```markdown
## Solution Verification

### Performance Impact
- LCP: 3200ms â†’ 2100ms (Threshold: 2500ms) âœ…
- TTFB: 950ms â†’ 600ms (Threshold: 800ms) âœ…
- Cache Hit Rate: 85% â†’ 95% (Threshold: 90%) âœ…

### Regression Testing
- Component Tests: [results]
- Integration Tests: [results]
- Load Tests: [results]
```

## CRITICAL RULES

1. **Zero Deletion Policy**
   - ALL debug logs are permanent records
   - ALL performance metrics must be preserved
   - ALL solution attempts must be documented
   - Archive but NEVER delete

2. **Metric-Driven Investigation**
   - MUST capture performance metrics before changes
   - MUST verify metrics after changes
   - MUST document all metric improvements
   - MUST monitor for regressions

3. **Comprehensive Documentation**
   - MUST document all investigation steps
   - MUST include all relevant metrics
   - MUST link to related issues
   - MUST update technical documentation

4. **Solution Verification**
   - MUST verify against performance thresholds
   - MUST run full test suite
   - MUST monitor post-deployment
   - MUST update monitoring alerts

## SEARCH AND REFERENCE

### 1. Metric-Based Search
```bash
# Search by performance threshold violations
grep -r "LCP.*>.*2500" debug_history/

# Search by error pattern
find . -type f -exec grep -l "Cannot read properties" {} \;

# Search by component
find . -type f -name "*BlogPost*.md"
```

### 2. Cross-Reference System
```markdown
## Related Issues
- DBG-20250120-003: Similar performance degradation
- DBG-20250115-001: Related cache optimization
```

### 3. Monitoring Integration
```typescript
// Add new monitoring based on discovered issues
interface MonitoringUpdate {
  metric: string;
  threshold: number;
  alert: string;
  history: string[]; // Related debug sessions
}
